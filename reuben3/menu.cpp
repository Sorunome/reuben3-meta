#include "menu.h"
#include "player.h"
#include "language.h"
#include <Gamebuino-Meta.h>
const uint8_t title_data[] = {76, 21, 1, 0, 0, 0x0E, 1, 0xee, 0xee,0xef, 0xff,0xff, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xef,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xff,0xff, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xef, 0xff,0xff, 0xfe,0xee, 0xee,0xee, 0xee,0xee, 0xff,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xef, 0xff,0xff, 0xfe,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe5, 0xf5,0x55, 0xf5,0xee, 0xee,0xee, 0xee,0xee, 0xff,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xff, 0x55,0x55, 0xff,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xf5,0xef, 0xf5,0xee, 0xee,0xee, 0xee,0xee, 0x5f,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xf5, 0x5e,0xee, 0x5f,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xfe, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xff,0xff, 0xf5,0xee, 0xff,0xef, 0xfe,0xff, 0xef,0xff, 0xfe,0xee, 0xff,0xef, 0xff,0xfe, 0xee,0xee, 0xee,0xf5, 0xee,0xee, 0xef,0xff, 0xef,0xfe, 0xee,0xff, 0xee,0xff, 0xff,0xff, 0xfe,0xee, 0xee,0xee, 0xee,0xee, 0xff,0xff, 0x55,0xef, 0xff,0xff, 0xf5,0xff, 0x5f,0xff, 0xff,0xef, 0xff,0xff, 0xff,0xff, 0xee,0xee, 0xee,0xf5, 0xee,0xee, 0xef,0xff, 0x5f,0xf5, 0xef,0xff, 0xff,0xff, 0xff,0xff, 0xf5,0xee, 0xee,0xee, 0xee,0xee, 0xf5,0x5f, 0x5e,0xff, 0x55,0xf5, 0xf5,0x5f, 0x5f,0x55, 0x5f,0xff, 0x55,0xf5, 0xf5,0x5f, 0x5e,0xee, 0xee,0xff, 0xee,0xee, 0xff,0x5f, 0x55,0xf5, 0xff,0x55, 0xff,0xff, 0x55,0xf5, 0x55,0xee, 0xee,0xee, 0xee,0xee, 0xf5,0xef, 0xfe,0xff, 0xff,0xf5, 0xf5,0xef, 0x5f,0x5e, 0xef,0xff, 0xff,0xf5, 0xf5,0xef, 0x5e,0xee, 0xee,0x5f, 0x5e,0xee, 0xf5,0x5f, 0x5e,0xf5, 0xff,0xff, 0xf5,0xff, 0xfe,0xf5, 0xee,0xee, 0xee,0xee, 0xee,0xef, 0xff,0xe5, 0xff,0xff, 0x55,0x55, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0x55,0x55, 0xff,0xef, 0xfe,0xee, 0xee,0xef, 0xff,0xff, 0xf5,0xef, 0xff,0xff, 0xff,0x55, 0x5f,0xff, 0xf5,0xff, 0xfe,0xee, 0xee,0xee, 0xee,0xef, 0xff,0x5e, 0x5f,0x5f, 0xff,0xf5, 0x5f,0xff, 0xff,0xff, 0xf5,0x5f, 0xff,0xff, 0xff,0x5f, 0xf5,0xee, 0xee,0xe5, 0xff,0xff, 0xff,0xe5, 0xff,0xff, 0x5f,0xff, 0xff,0xff, 0x55,0x5f, 0xf5,0xee, 0xee,0xee, 0xee,0xe5, 0x55,0x5e, 0xe5,0x55, 0x55,0x55, 0xe5,0x55, 0x55,0x55, 0x55,0xe5, 0x55,0x55, 0x55,0x55, 0x55,0xee, 0xee,0xee, 0x55,0xff, 0xff,0x5e, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x5e,0xe5, 0x55,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x55, 0x55,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0xff, 0xff,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0x55, 0x55,0xff, 0xfe,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xef, 0xff,0xfe, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xff,0xff, 0xfe,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x5f, 0x5e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xfe, 0xee,0xe5, 0xf5,0x5f, 0xee,0xee, 0xef,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x55,0xf5, 0x5e,0xfe, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xef, 0xee,0xee, 0xef,0xfe, 0xef,0xff, 0xef,0xff, 0xee,0xee, 0xff,0xf5, 0xee,0xfe, 0xff,0xff, 0xef,0xef, 0xef,0xee, 0xfe,0xee, 0xfe,0xef, 0xfe,0xee, 0xee,0xfe, 0xee,0x5e, 0xef,0xfe, 0xfe,0xee, 0xfe,0xef, 0xff,0xef, 0xee,0xee, 0xf5,0x5f, 0xef,0x55, 0xe5,0xf5, 0xee,0xee, 0xf5,0x5f, 0xef,0xff, 0x5f,0x55, 0xef,0xef, 0xef,0xef, 0xff,0xef, 0xff,0xef, 0x5f,0xee, 0xee,0xfe, 0xee,0xfe, 0xef,0x5f, 0x5f,0xef, 0xff,0xef, 0x55,0xef, 0xee,0xfe, 0xfe,0xef, 0xe5,0xff, 0xee,0xfe, 0xee,0xee, 0xfe,0xef, 0xef,0x55, 0xef,0xee, 0xef,0xef, 0xef,0xef, 0x55,0xef, 0x55,0xef, 0xef,0xee, 0xee,0xfe, 0xee,0xfe, 0xef,0xef, 0xef,0xef, 0x55,0xe5, 0xff,0xff, 0xff,0xfe, 0x5f,0xf5, 0xef,0xff, 0xee,0x5f, 0xee,0xef, 0xff,0xf5, 0xe5,0xff, 0xe5,0xfe, 0xef,0xf5, 0xf5,0xe5, 0xff,0xe5, 0xff,0xef, 0xef,0xee, 0xef,0xff, 0xef,0xff, 0xef,0xef, 0xef,0xe5, 0xff,0xef, 0xff,0x55, 0x55,0x5e, 0xe5,0x5e, 0xe5,0x55, 0xee,0xe5, 0xee,0xe5, 0x55,0x5e, 0xee,0x55, 0xee,0x5e, 0xe5,0x5e, 0x5e,0xee, 0x55,0xee, 0x55,0xe5, 0xe5,0xee, 0xe5,0x55, 0xe5,0x55, 0xe5,0xe5, 0xe5,0xee, 0x55,0xe5, 0x55};

const uint8_t cursor_data[] = {
	3, 3,
	0x01, 0x00,
	0,
	0x05,
	0x01,
	
	0xFF, 0xF5,
	0xF5, 0xF5,
	0xFF, 0xF5,
};

void menuAskDeleteSlot(uint8_t slot, Image& cursorImg) {
	bool cursor = 0;
	const char* confirmStr = gb.language.get(lang_menu_delete_savegame);
	while(1) {
		while(!gb.update());
		gb.display.nextFrame();
		
		cursor = max(0, min(1, cursor + gb.buttons.pressed(BUTTON_DOWN) - gb.buttons.pressed(BUTTON_UP)));
		
		gb.display.setColor(BEIGE);
		gb.display.setCursor(40 - strlen(confirmStr)*2, 32-9);
		gb.display.print(confirmStr);
		gb.display.setCursor(40, 32-3);
		gb.display.print(lang_no);
		gb.display.setCursor(40, 32+3);
		gb.display.print(lang_yes);
		gb.display.drawImage(35, 32-3+1+6*cursor, cursorImg);
		
		if (gb.buttons.pressed(BUTTON_A)) {
			if (!cursor) {
				return;
			}
			gb.save.del(slot*2);
			return;
		}
	}
}

void menuLoadSlots(bool* haveSlot, SaveData* slot) {
	for (uint8_t i = 0; i < 3; i++) {
		haveSlot[i] = gb.save.get(i*2);
		if (!haveSlot[i]) {
			continue;
		}
		gb.save.get(i*2 + 1, slot[i]);
	}
}

bool menuPickSaveSlot(Image& title, Image& cursorImg) {
	bool haveSlot[3];
	SaveData slot[3];
	menuLoadSlots(haveSlot, slot);
	const char* loadGameStr = gb.language.get(lang_menu_load_game);
	int8_t cursor = 0;
	static const int8_t cursorMax = 2;
	
	while(1) {
		while(!gb.update());
		gb.display.nextFrame();
		gb.display.drawImage(2, 11, title);
		
		cursor = max(0, min(cursorMax, cursor + gb.buttons.pressed(BUTTON_DOWN) - gb.buttons.pressed(BUTTON_UP)));
		
		gb.display.setColor(BEIGE);
		gb.display.setCursor(40 - strlen(loadGameStr)*2, 34);
		gb.display.print(loadGameStr);
		
		for (uint8_t i = 0; i < 3; i++) {
			gb.display.setCursor(17, 42+6*i);
			if (!haveSlot[i]) {
				gb.display.print(lang_menu_empty_slot);
			} else {
				gb.display.print(lang_menu_level);
				gb.display.print(slot[i].lvl);
			}
		}
		gb.display.drawImage(12, 43+6*cursor, cursorImg);
		
		if (gb.buttons.pressed(BUTTON_MENU)) {
			return false;
		}
		
		if (gb.buttons.pressed(BUTTON_A)) {
			player.init(cursor);
			player.load();
			return true;
		}
		
		if (gb.buttons.pressed(BUTTON_B) && haveSlot[cursor]) {
			menuAskDeleteSlot(cursor, cursorImg);
			menuLoadSlots(haveSlot, slot);
		}
		
//		gb.display.setColor(BLACK, WHITE);
//		gb.display.setCursor(0, 0);
//		gb.display.print(gb.getCpuLoad());
	}
	return false;
}

void mainMenu() {
	Image title(title_data);
	Image cursorImg(cursor_data);
	
	gb.display.init("assets/fita.gmv");
	int8_t cursor = 0;
	static const int8_t cursorMax = 2;
	bool inMainMenu = true;
	while(inMainMenu) {
		while(!gb.update());
		gb.display.nextFrame();
		gb.display.drawImage(2, 11, title);
		
		cursor = max(0, min(cursorMax, cursor + gb.buttons.pressed(BUTTON_DOWN) - gb.buttons.pressed(BUTTON_UP)));
		
		gb.display.setColor(BEIGE);
		gb.display.setCursor(20, 40);
		gb.display.print(lang_menu_start);
		gb.display.setCursor(20, 46);
		gb.display.println(lang_menu_instructions);
		gb.display.setCursor(20, 52);
		gb.display.print(lang_menu_credits);
		gb.display.drawImage(15, 41+6*cursor, cursorImg);
		
		if (gb.buttons.pressed(BUTTON_A)) {
			switch(cursor) {
				case 0:
					if (menuPickSaveSlot(title, cursorImg)) {
						inMainMenu = false;
					}
					break;
				case 1:
					break;
				case 2:
					break;
			}
		}
		
//		gb.display.setColor(BLACK, WHITE);
//		gb.display.setCursor(0, 0);
//		gb.display.print(gb.getCpuLoad());
	}
	gb.display.init(80, 64, ColorMode::rgb565);
}
